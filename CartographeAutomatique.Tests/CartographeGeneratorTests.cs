using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Xunit;

namespace CartographeAutomatique.Tests;

public class CartographeGeneratorTests
{
    private const string VectorClassText = @"
namespace TestNamespace;

[Generators.MapTo(typeof(Point)]
public partial class Vector3
{
    public float X { get; set; }
    public float Y { get; set; }
    public float Z { get; set; }
}

public partial class Point
{
    public float X { get; set; }
    public float Y { get; set; }
    public float Z { get; set; }
};
";

    private const string ExpectedGeneratedClassText = @"// <auto-generated/>
namespace TestNamespace;

public partial class Vector3
{
    public TestNamespace.Point MapToPoint() =>
       new()
       {
            X = this.X,
			Y = this.Y,
			Z = this.Z
       };
}";

    [Fact]
    public void GenerateReportMethod()
    {
        // Create an instance of the source generator.
        var generator = new CartographeGenerator();

        // Source generators should be tested using 'GeneratorDriver'.
        var driver = CSharpGeneratorDriver.Create(generator);

        // We need to create a compilation with the required source code.
        var compilation = CSharpCompilation.Create(nameof(CartographeGeneratorTests),
            new[] { CSharpSyntaxTree.ParseText(VectorClassText) },
            new[]
            {
                // To support 'System.Attribute' inheritance, add reference to 'System.Private.CoreLib'.
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location)
            });

        // Run generators and retrieve all results.
        var runResult = driver.RunGenerators(compilation).GetRunResult();

        // All generated files can be found in 'RunResults.GeneratedTrees'.
        var generatedFileSyntax = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("Vector3.g.cs"));

        // Complex generators should be tested using text comparison.
        Assert.Equal(ExpectedGeneratedClassText, generatedFileSyntax.GetText().ToString(),
            ignoreLineEndingDifferences: true);
    }
}